#ifndef __VOCL_STRUCTURES_H__
#define __VOCL_STRUCTURES_H__

#include <CL/opencl.h>
#include <mpi.h>
#include "vocl_opencl.h"

typedef @vocl_platform_id@   vocl_platform_id;
typedef @vocl_device_id@     vocl_device_id;
typedef @vocl_context@       vocl_context;
typedef @vocl_command_queue@ vocl_command_queue;
typedef @vocl_mem@           vocl_mem;
typedef @vocl_program@       vocl_program;
typedef @vocl_kernel@        vocl_kernel;
typedef @vocl_event@         vocl_event;
typedef @vocl_sampler@       vocl_sampler;


/* default num for buffer pool for each proxy */
/* but the program can automatically double */
/* the size as required */
#define VOCL_BUFF_NUM        200

struct strVOCLPlatformID {
	cl_platform_id       clPlatformID;
	vocl_platform_id     voclPlatformID;
	int                  proxyRank;
	int                  proxyIndex;
	MPI_Comm             proxyComm;
	MPI_Comm             proxyCommData;
	int                 isOnLocalNode;
	struct strVOCLPlatformID *next;
};

struct strVOCLDeviceID {
	vocl_device_id     voclDeviceID;
	cl_device_id       clDeviceID;
	int                proxyRank;
	int                proxyIndex;
	MPI_Comm           proxyComm;
	MPI_Comm           proxyCommData;
	int               isOnLocalNode;
	
	struct strVOCLDeviceID *next;
};

struct strVOCLContext {
	vocl_context      voclContext;
	cl_context        clContext;
	int               proxyRank;
	int               proxyIndex;
	MPI_Comm          proxyComm;
	MPI_Comm          proxyCommData;
	int              isOnLocalNode;
	struct strVOCLContext *next;
};

struct strVOCLCommandQueue {
	vocl_command_queue voclCommandQueue;
	cl_command_queue   clCommandQueue;
	int                proxyRank;
	int                proxyIndex;
	MPI_Comm           proxyComm;
	MPI_Comm           proxyCommData;
	int               isOnLocalNode;
	/* properties used for migration */
	cl_command_queue_properties properties;
	vocl_context       context;
	vocl_device_id     deviceID;
	struct strVOCLCommandQueue *next;
};

struct strVOCLMemory {
	vocl_mem          voclMemory;
	cl_mem            clMemory;
	int               proxyRank;
	int               proxyIndex;
	MPI_Comm          proxyComm;
	MPI_Comm          proxyCommData;
	int              isOnLocalNode;

	/* used for migration */
	cl_mem_flags      flags;
	size_t            size;
	int               isWritten; /* 1: not written, 1, written */
	vocl_context      context;

    struct strVOCLMemory *next;
};

struct strVOCLProgram {
	vocl_program     voclProgram;
	cl_program       clProgram;
	int              proxyRank;
	int              proxyIndex;
	MPI_Comm         proxyComm;
	MPI_Comm         proxyCommData;
	int             isOnLocalNode;
    /* to store source code for migration*/
	char             *voclSourceString;
	size_t           sourceSize;
	char             *buildOptions;
	vocl_context     context;

	struct strVOCLProgram *next;
};

struct strVOCLKernel {
	vocl_kernel      voclKernel;
	cl_kernel        clKernel;
	int              proxyRank;
	int              proxyIndex;
	MPI_Comm         proxyComm;
	MPI_Comm         proxyCommData;
	int             isOnLocalNode;

	/*used for migration */
	char             *kernelName;
	vocl_program     program;
	vocl_context     context;

	struct strVOCLKernel *next;
};

struct strVOCLEvent {
	vocl_event      voclEvent;
	cl_event        clEvent;
	int             proxyRank;
	int             proxyIndex;
	MPI_Comm        proxyComm;
	MPI_Comm        proxyCommData;
	struct strVOCLEvent *next;
};

struct strVOCLSampler {
	vocl_sampler   voclSampler;
	cl_sampler     clSampler;
	int            proxyRank;
	int            proxyIndex;
	MPI_Comm       proxyComm;
	MPI_Comm       proxyCommData;
	struct strVOCLSampler *next;
};

/* structures used for buffer pool */
struct strReadBufferInfo {
    int isInUse;
    MPI_Request request;
};

struct voclReadBuffer {
    int readDataRequestNum;
    int curReadBufferIndex;
    struct strReadBufferInfo voclReadBufferInfo[VOCL_READ_BUFFER_NUM];
};

struct strWriteBufferInfo {
    int isInUse;
    MPI_Request request;
};

struct voclWriteBuffer {
	int writeDataRequestNum;
	int curWriteBufferIndex;
	struct strWriteBufferInfo voclWriteBufferInfo[VOCL_WRITE_BUFFER_NUM];
};

#endif

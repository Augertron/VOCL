#ifndef __VOCL_STRUCTURES_H__
#define __VOCL_STRUCTURES_H__

#include <CL/opencl.h>
#include <mpi.h>
#include "voclOpenclMacro.h"

typedef @vocl_platform_id@ vocl_platform_id;
typedef @vocl_device_id@ vocl_device_id;
typedef @vocl_context@ vocl_context;
typedef @vocl_command_queue@ vocl_command_queue;
typedef @vocl_mem@ vocl_mem;
typedef @vocl_program@ vocl_program;
typedef @vocl_kernel@ vocl_kernel;
typedef @vocl_event@ vocl_event;
typedef @vocl_sampler@ vocl_sampler;


/* default num for buffer pool for each proxy */
/* but the program can automatically double */
/* the size as required */
#define VOCL_BUFF_NUM        200

struct strVOCLPlatformID {
    cl_platform_id clPlatformID;
    vocl_platform_id voclPlatformID;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;
    struct strVOCLPlatformID *next;
};

struct strVOCLDeviceID {
    vocl_device_id voclDeviceID;
    cl_device_id clDeviceID;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;

    struct strVOCLDeviceID *next;
};

struct strVOCLContext {
    vocl_context voclContext;
    cl_context clContext;
    int proxyRank;
    int proxyIndex;
	int migrationStatus;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;
    struct strVOCLContext *next;
};

/* record the device memory corresponding to */
/* the current command */
struct strVOCLMemInfo {
	vocl_mem memory;
	size_t   size;
	int      migrationStatus;
	struct strVOCLMemInfo *next;
};

struct strVOCLCommandQueue {
    vocl_command_queue voclCommandQueue;
    cl_command_queue clCommandQueue;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;
    vocl_device_id deviceID;

    /* old cl command queue information for migration */
    int isOldValid;
    cl_command_queue oldCommandQueue;
    int oldProxyRank;
    int oldProxyIndex;
    MPI_Comm oldProxyComm;
    MPI_Comm oldProxyCommData;
	vocl_device_id oldDeviceID;

    /* properties used for migration */
    cl_command_queue_properties properties;
    vocl_context context;

	/* command queue state */
	int migrationStatus;
	size_t deviceMemSize;
	struct strVOCLMemInfo *memPtr;

    struct strVOCLCommandQueue *next;
};

struct strVOCLMemory {
    vocl_mem voclMemory;
    cl_mem clMemory;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;

    /* old memory info is migration exists */
    int isOldValid;
    cl_mem oldMemory;
    int oldProxyRank;
    int oldProxyIndex;
    MPI_Comm oldProxyComm;
    MPI_Comm oldProxyCommData;

    /* used for migration */
	int migrationStatus;
    cl_mem_flags flags;    /* indicate whether a kernel argument is device memory */
    size_t size;
    int isWritten;              /* 1: not written, 1, written, incomplete, 2 written, completed */
	void *hostPtr;
    vocl_context context;

    struct strVOCLMemory *next;
};

struct strVOCLProgram {
    vocl_program voclProgram;
    cl_program clProgram;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;
    /* to store source code for migration */
	int migrationStatus;
    char *voclSourceString;
    size_t sourceSize;
    char *buildOptions;
    vocl_context context;

    struct strVOCLProgram *next;
};

struct strVOCLKernel {
    vocl_kernel voclKernel;
    cl_kernel clKernel;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;

    /*used for migration */
	int migrationStatus;
    char *kernelName;
    vocl_program program;
    vocl_context context;

    struct strVOCLKernel *next;
};

struct strVOCLEvent {
    vocl_event voclEvent;
    cl_event clEvent;
    int proxyRank;
    int proxyIndex;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;
    struct strVOCLEvent *next;
};

struct strVOCLSampler {
    vocl_sampler voclSampler;
    cl_sampler clSampler;
    int proxyRank;
    int proxyIndex;
	int migrationStatus;
    MPI_Comm proxyComm;
    MPI_Comm proxyCommData;
    struct strVOCLSampler *next;
};


#define VOCL_EVENT_NULL -1

/* structures used for buffer pool */
struct strReadBufferInfo {
    int isInUse;
    vocl_event event;
    int bufferNum;
    MPI_Request request;
};

struct voclReadBuffer {
    int readDataRequestNum;
    int curReadBufferIndex;
    struct strReadBufferInfo voclReadBufferInfo[VOCL_READ_BUFFER_NUM];
};

struct strWriteBufferInfo {
    int isInUse;
    vocl_event event;
    int bufferNum;
    MPI_Request request;
};

struct voclWriteBuffer {
    int writeDataRequestNum;
    int curWriteBufferIndex;
    struct strWriteBufferInfo voclWriteBufferInfo[VOCL_WRITE_BUFFER_NUM];
};

struct strDeviceKernelNums {
	int deviceNum;
	cl_device_id deviceIDs[MAX_DEVICE_NUM_PER_NODE];
	int kernelNums[MAX_DEVICE_NUM_PER_NODE];
};

#endif

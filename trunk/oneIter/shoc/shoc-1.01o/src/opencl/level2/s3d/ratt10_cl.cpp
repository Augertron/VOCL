const char *cl_source_ratt10 =
"#ifdef K_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_khr_fp64: enable\n"
"#elif AMD_DOUBLE_PRECISION\n"
"#define DOUBLE_PRECISION\n"
"#pragma OPENCL EXTENSION cl_amd_fp64: enable\n"
"#endif\n"
"\n"
"\n"
"//replace divisions by multiplication with the reciprocal\n"
"#define REPLACE_DIV_WITH_RCP 1\n"
"\n"
"//Call the appropriate math function based on precision\n"
"#ifdef DOUBLE_PRECISION\n"
"#define real double\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#else\n"
"#define real float\n"
"#if REPLACE_DIV_WITH_RCP\n"
"#define DIV(x,y) ((x)*(1.0f/(y)))\n"
"#else\n"
"#define DIV(x,y) ((x)/(y))\n"
"#endif\n"
"#define POW pow\n"
"#define EXP exp\n"
"#define EXP10 exp10\n"
"#define EXP2 exp2\n"
"#define MAX fmax\n"
"#define MIN fmin\n"
"#define LOG log\n"
"#define LOG10 log10\n"
"#endif\n"
"//Kernel indexing macros\n"
"#define thread_num (get_global_id(0))\n"
"#define idx2(p,z) (p[(((z)-1)*(N_GP)) + thread_num])\n"
"#define idx(x, y) ((x)[(y)-1])\n"
"#define C(q)     idx2(C, q)\n"
"#define Y(q)     idx2(Y, q)\n"
"#define RF(q)    idx2(RF, q)\n"
"#define EG(q)    idx2(EG, q)\n"
"#define RB(q)    idx2(RB, q)\n"
"#define RKLOW(q) idx2(RKLOW, q)\n"
"#define ROP(q)   idx(ROP, q)\n"
"#define WDOT(q)  idx2(WDOT, q)\n"
"#define RKF(q)   idx2(RKF, q)\n"
"#define RKR(q)   idx2(RKR, q)\n"
"#define A_DIM    (11)\n"
"#define A(b, c)  idx2(A, (((b)*A_DIM)+c) )\n"
"\n"
"\n"
"__kernel void\n"
"ratt10_kernel(__global const real* T, __global real* RKLOW, real TCONV)\n"
"{\n"
"\n"
"    const real TEMP = T[get_global_id(0)]*TCONV;\n"
"    const real ALOGT = LOG(TEMP);\n"
"\n"
"    RKLOW(1) = EXP(4.22794408e1 -9.e-1*ALOGT + DIV(8.55468335e2,TEMP));\n"
"    RKLOW(2) = EXP(6.37931383e1 -3.42e0*ALOGT - DIV(4.24463259e4,TEMP));\n"
"    RKLOW(3) = EXP(6.54619238e1 -3.74e0*ALOGT - DIV(9.74227469e2,TEMP));\n"
"    RKLOW(4) = EXP(5.55621468e1 -2.57e0*ALOGT - DIV(7.17083751e2,TEMP));\n"
"    RKLOW(5) = EXP(6.33329483e1 -3.14e0*ALOGT - DIV(6.18956501e2,TEMP));\n"
"    RKLOW(6) = EXP(7.69748493e1 -5.11e0*ALOGT - DIV(3.57032226e3,TEMP));\n"
"    RKLOW(7) = EXP(6.98660102e1 -4.8e0*ALOGT - DIV(2.79788467e3,TEMP));\n"
"    RKLOW(8) = EXP(7.68923562e1 -4.76e0*ALOGT - DIV(1.22784867e3,TEMP));\n"
"    RKLOW(9) = EXP(1.11312542e2 -9.588e0*ALOGT - DIV(2.566405e3,TEMP));\n"
"    RKLOW(10) = EXP(1.15700234e2 -9.67e0*ALOGT - DIV(3.13000767e3,TEMP));\n"
"    RKLOW(11) = EXP(3.54348644e1 -6.4e-1*ALOGT - DIV(2.50098684e4,TEMP));\n"
"    RKLOW(12) = EXP(6.3111756e1 -3.4e0*ALOGT - DIV(1.80145126e4,TEMP));\n"
"    RKLOW(13) = EXP(9.57409899e1 -7.64e0*ALOGT - DIV(5.98827834e3,TEMP));\n"
"    RKLOW(14) = EXP(6.9414025e1 -3.86e0*ALOGT - DIV(1.67067934e3,TEMP));\n"
"    RKLOW(15) = EXP(1.35001549e2 -1.194e1*ALOGT - DIV(4.9163262e3,TEMP));\n"
"    RKLOW(16) = EXP(9.14494773e1 -7.297e0*ALOGT - DIV(2.36511834e3,TEMP));\n"
"    RKLOW(17) = EXP(1.17075165e2 -9.31e0*ALOGT - DIV(5.02512164e4,TEMP));\n"
"    RKLOW(18) = EXP(9.68908955e1 -7.62e0*ALOGT - DIV(3.50742017e3,TEMP));\n"
"    RKLOW(19) = EXP(9.50941235e1 -7.08e0*ALOGT - DIV(3.36400342e3,TEMP));\n"
"    RKLOW(20) = EXP(1.38440285e2 -1.2e1*ALOGT - DIV(3.00309643e3,TEMP));\n"
"    RKLOW(21) = EXP(8.93324137e1 -6.66e0*ALOGT - DIV(3.52251667e3,TEMP));\n"
"}\n"
;
